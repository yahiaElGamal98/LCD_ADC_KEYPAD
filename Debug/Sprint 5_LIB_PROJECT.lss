
Sprint 5_LIB_PROJECT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000077c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000042  00800060  0000077c  000007f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000832  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000864  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000e0  00000000  00000000  000008a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001563  00000000  00000000  00000980  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000961  00000000  00000000  00001ee3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000085c  00000000  00000000  00002844  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001f4  00000000  00000000  000030a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000056d  00000000  00000000  00003294  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000725  00000000  00000000  00003801  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a0  00000000  00000000  00003f26  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e7       	ldi	r30, 0x7C	; 124
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 3a       	cpi	r26, 0xA2	; 162
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 9c 03 	call	0x738	; 0x738 <main>
  7a:	0c 94 bc 03 	jmp	0x778	; 0x778 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_init>:
#include "../../01-LIB/Registers.h"
#include "DIO.h"


void DIO_init(ST_DIO_config_t* configurations)   
{
  82:	fc 01       	movw	r30, r24
	switch(configurations->PORT)
  84:	90 81       	ld	r25, Z
  86:	92 34       	cpi	r25, 0x42	; 66
  88:	31 f1       	breq	.+76     	; 0xd6 <DIO_init+0x54>
  8a:	18 f4       	brcc	.+6      	; 0x92 <DIO_init+0x10>
  8c:	91 34       	cpi	r25, 0x41	; 65
  8e:	39 f0       	breq	.+14     	; 0x9e <DIO_init+0x1c>
  90:	08 95       	ret
  92:	93 34       	cpi	r25, 0x43	; 67
  94:	e1 f1       	breq	.+120    	; 0x10e <DIO_init+0x8c>
  96:	94 34       	cpi	r25, 0x44	; 68
  98:	09 f4       	brne	.+2      	; 0x9c <DIO_init+0x1a>
  9a:	55 c0       	rjmp	.+170    	; 0x146 <DIO_init+0xc4>
  9c:	08 95       	ret
	{
		case 'A':
			if(OUTPUT==configurations->DDRx) //set bit high if OUTPUT
  9e:	82 81       	ldd	r24, Z+2	; 0x02
  a0:	81 30       	cpi	r24, 0x01	; 1
  a2:	61 f4       	brne	.+24     	; 0xbc <DIO_init+0x3a>
			{
				PORTA_DIR|=HIGH<<configurations->Px;
  a4:	2a b3       	in	r18, 0x1a	; 26
  a6:	81 e0       	ldi	r24, 0x01	; 1
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	01 80       	ldd	r0, Z+1	; 0x01
  ac:	02 c0       	rjmp	.+4      	; 0xb2 <DIO_init+0x30>
  ae:	88 0f       	add	r24, r24
  b0:	99 1f       	adc	r25, r25
  b2:	0a 94       	dec	r0
  b4:	e2 f7       	brpl	.-8      	; 0xae <DIO_init+0x2c>
  b6:	82 2b       	or	r24, r18
  b8:	8a bb       	out	0x1a, r24	; 26
  ba:	08 95       	ret
			}
			else //clear bit (low) if INPUT
			{
				PORTA_DIR&=~(HIGH<<configurations->Px);
  bc:	2a b3       	in	r18, 0x1a	; 26
  be:	81 e0       	ldi	r24, 0x01	; 1
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	01 80       	ldd	r0, Z+1	; 0x01
  c4:	02 c0       	rjmp	.+4      	; 0xca <DIO_init+0x48>
  c6:	88 0f       	add	r24, r24
  c8:	99 1f       	adc	r25, r25
  ca:	0a 94       	dec	r0
  cc:	e2 f7       	brpl	.-8      	; 0xc6 <DIO_init+0x44>
  ce:	80 95       	com	r24
  d0:	82 23       	and	r24, r18
  d2:	8a bb       	out	0x1a, r24	; 26
  d4:	08 95       	ret
			}
			break;
		case 'B':
			if(OUTPUT==configurations->DDRx)
  d6:	82 81       	ldd	r24, Z+2	; 0x02
  d8:	81 30       	cpi	r24, 0x01	; 1
  da:	61 f4       	brne	.+24     	; 0xf4 <DIO_init+0x72>
			{
				PORTB_DIR|=HIGH<<configurations->Px;
  dc:	27 b3       	in	r18, 0x17	; 23
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	01 80       	ldd	r0, Z+1	; 0x01
  e4:	02 c0       	rjmp	.+4      	; 0xea <DIO_init+0x68>
  e6:	88 0f       	add	r24, r24
  e8:	99 1f       	adc	r25, r25
  ea:	0a 94       	dec	r0
  ec:	e2 f7       	brpl	.-8      	; 0xe6 <DIO_init+0x64>
  ee:	82 2b       	or	r24, r18
  f0:	87 bb       	out	0x17, r24	; 23
  f2:	08 95       	ret
			}
			else
			{
				PORTB_DIR&=~(HIGH<<configurations->Px);
  f4:	27 b3       	in	r18, 0x17	; 23
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	01 80       	ldd	r0, Z+1	; 0x01
  fc:	02 c0       	rjmp	.+4      	; 0x102 <DIO_init+0x80>
  fe:	88 0f       	add	r24, r24
 100:	99 1f       	adc	r25, r25
 102:	0a 94       	dec	r0
 104:	e2 f7       	brpl	.-8      	; 0xfe <DIO_init+0x7c>
 106:	80 95       	com	r24
 108:	82 23       	and	r24, r18
 10a:	87 bb       	out	0x17, r24	; 23
 10c:	08 95       	ret
			}
			break;
		case 'C':
			if(OUTPUT==configurations->DDRx)
 10e:	82 81       	ldd	r24, Z+2	; 0x02
 110:	81 30       	cpi	r24, 0x01	; 1
 112:	61 f4       	brne	.+24     	; 0x12c <DIO_init+0xaa>
			{
				PORTC_DIR|=HIGH<<configurations->Px;
 114:	24 b3       	in	r18, 0x14	; 20
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	01 80       	ldd	r0, Z+1	; 0x01
 11c:	02 c0       	rjmp	.+4      	; 0x122 <DIO_init+0xa0>
 11e:	88 0f       	add	r24, r24
 120:	99 1f       	adc	r25, r25
 122:	0a 94       	dec	r0
 124:	e2 f7       	brpl	.-8      	; 0x11e <DIO_init+0x9c>
 126:	82 2b       	or	r24, r18
 128:	84 bb       	out	0x14, r24	; 20
 12a:	08 95       	ret
			}
			else
			{
				PORTC_DIR&=~(HIGH<<configurations->Px);
 12c:	24 b3       	in	r18, 0x14	; 20
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	01 80       	ldd	r0, Z+1	; 0x01
 134:	02 c0       	rjmp	.+4      	; 0x13a <DIO_init+0xb8>
 136:	88 0f       	add	r24, r24
 138:	99 1f       	adc	r25, r25
 13a:	0a 94       	dec	r0
 13c:	e2 f7       	brpl	.-8      	; 0x136 <DIO_init+0xb4>
 13e:	80 95       	com	r24
 140:	82 23       	and	r24, r18
 142:	84 bb       	out	0x14, r24	; 20
 144:	08 95       	ret
			}
			break;
		case 'D':
			if(OUTPUT==configurations->DDRx)
 146:	82 81       	ldd	r24, Z+2	; 0x02
 148:	81 30       	cpi	r24, 0x01	; 1
 14a:	61 f4       	brne	.+24     	; 0x164 <DIO_init+0xe2>
			{
				PORTD_DIR|=HIGH<<configurations->Px;
 14c:	21 b3       	in	r18, 0x11	; 17
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	01 80       	ldd	r0, Z+1	; 0x01
 154:	02 c0       	rjmp	.+4      	; 0x15a <DIO_init+0xd8>
 156:	88 0f       	add	r24, r24
 158:	99 1f       	adc	r25, r25
 15a:	0a 94       	dec	r0
 15c:	e2 f7       	brpl	.-8      	; 0x156 <DIO_init+0xd4>
 15e:	82 2b       	or	r24, r18
 160:	81 bb       	out	0x11, r24	; 17
 162:	08 95       	ret
			}
			else
			{
				PORTD_DIR&=~(HIGH<<configurations->Px);
 164:	21 b3       	in	r18, 0x11	; 17
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	01 80       	ldd	r0, Z+1	; 0x01
 16c:	02 c0       	rjmp	.+4      	; 0x172 <DIO_init+0xf0>
 16e:	88 0f       	add	r24, r24
 170:	99 1f       	adc	r25, r25
 172:	0a 94       	dec	r0
 174:	e2 f7       	brpl	.-8      	; 0x16e <DIO_init+0xec>
 176:	80 95       	com	r24
 178:	82 23       	and	r24, r18
 17a:	81 bb       	out	0x11, r24	; 17
 17c:	08 95       	ret

0000017e <DIO_write>:
	}
}

void DIO_write(uint8_t port, EN_pins pin, uint8_t data)
{
	switch(port)
 17e:	82 34       	cpi	r24, 0x42	; 66
 180:	19 f1       	breq	.+70     	; 0x1c8 <DIO_write+0x4a>
 182:	18 f4       	brcc	.+6      	; 0x18a <DIO_write+0xc>
 184:	81 34       	cpi	r24, 0x41	; 65
 186:	39 f0       	breq	.+14     	; 0x196 <DIO_write+0x18>
 188:	08 95       	ret
 18a:	83 34       	cpi	r24, 0x43	; 67
 18c:	b1 f1       	breq	.+108    	; 0x1fa <DIO_write+0x7c>
 18e:	84 34       	cpi	r24, 0x44	; 68
 190:	09 f4       	brne	.+2      	; 0x194 <DIO_write+0x16>
 192:	4c c0       	rjmp	.+152    	; 0x22c <DIO_write+0xae>
 194:	08 95       	ret
	{
		case 'A':
		if(HIGH==data)
 196:	41 30       	cpi	r20, 0x01	; 1
 198:	59 f4       	brne	.+22     	; 0x1b0 <DIO_write+0x32>
		{
			PORTA_DATA|=HIGH<<pin;	//Set bit if data is high
 19a:	2b b3       	in	r18, 0x1b	; 27
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <DIO_write+0x28>
 1a2:	88 0f       	add	r24, r24
 1a4:	99 1f       	adc	r25, r25
 1a6:	6a 95       	dec	r22
 1a8:	e2 f7       	brpl	.-8      	; 0x1a2 <DIO_write+0x24>
 1aa:	82 2b       	or	r24, r18
 1ac:	8b bb       	out	0x1b, r24	; 27
 1ae:	08 95       	ret
		}
		else
		{
			PORTA_DATA&=~(HIGH<<pin);	//Clear bit if data is low
 1b0:	2b b3       	in	r18, 0x1b	; 27
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	02 c0       	rjmp	.+4      	; 0x1bc <DIO_write+0x3e>
 1b8:	88 0f       	add	r24, r24
 1ba:	99 1f       	adc	r25, r25
 1bc:	6a 95       	dec	r22
 1be:	e2 f7       	brpl	.-8      	; 0x1b8 <DIO_write+0x3a>
 1c0:	80 95       	com	r24
 1c2:	82 23       	and	r24, r18
 1c4:	8b bb       	out	0x1b, r24	; 27
 1c6:	08 95       	ret
		}
		break;
		case 'B':
		if(HIGH==data)
 1c8:	41 30       	cpi	r20, 0x01	; 1
 1ca:	59 f4       	brne	.+22     	; 0x1e2 <DIO_write+0x64>
		{
			PORTB_DATA|=HIGH<<pin;
 1cc:	28 b3       	in	r18, 0x18	; 24
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	02 c0       	rjmp	.+4      	; 0x1d8 <DIO_write+0x5a>
 1d4:	88 0f       	add	r24, r24
 1d6:	99 1f       	adc	r25, r25
 1d8:	6a 95       	dec	r22
 1da:	e2 f7       	brpl	.-8      	; 0x1d4 <DIO_write+0x56>
 1dc:	82 2b       	or	r24, r18
 1de:	88 bb       	out	0x18, r24	; 24
 1e0:	08 95       	ret
		}
		else
		{
			PORTB_DATA&=~(HIGH<<pin);
 1e2:	28 b3       	in	r18, 0x18	; 24
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	02 c0       	rjmp	.+4      	; 0x1ee <DIO_write+0x70>
 1ea:	88 0f       	add	r24, r24
 1ec:	99 1f       	adc	r25, r25
 1ee:	6a 95       	dec	r22
 1f0:	e2 f7       	brpl	.-8      	; 0x1ea <DIO_write+0x6c>
 1f2:	80 95       	com	r24
 1f4:	82 23       	and	r24, r18
 1f6:	88 bb       	out	0x18, r24	; 24
 1f8:	08 95       	ret
		}
		break;
		case 'C':
		if(HIGH==data)
 1fa:	41 30       	cpi	r20, 0x01	; 1
 1fc:	59 f4       	brne	.+22     	; 0x214 <DIO_write+0x96>
		{
			PORTC_DATA|=HIGH<<pin;
 1fe:	25 b3       	in	r18, 0x15	; 21
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	02 c0       	rjmp	.+4      	; 0x20a <DIO_write+0x8c>
 206:	88 0f       	add	r24, r24
 208:	99 1f       	adc	r25, r25
 20a:	6a 95       	dec	r22
 20c:	e2 f7       	brpl	.-8      	; 0x206 <DIO_write+0x88>
 20e:	82 2b       	or	r24, r18
 210:	85 bb       	out	0x15, r24	; 21
 212:	08 95       	ret
		}
		else
		{
			PORTC_DATA&=~(HIGH<<pin);
 214:	25 b3       	in	r18, 0x15	; 21
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	02 c0       	rjmp	.+4      	; 0x220 <DIO_write+0xa2>
 21c:	88 0f       	add	r24, r24
 21e:	99 1f       	adc	r25, r25
 220:	6a 95       	dec	r22
 222:	e2 f7       	brpl	.-8      	; 0x21c <DIO_write+0x9e>
 224:	80 95       	com	r24
 226:	82 23       	and	r24, r18
 228:	85 bb       	out	0x15, r24	; 21
 22a:	08 95       	ret
		}
		break;
		case 'D':
		if(HIGH==data)
 22c:	41 30       	cpi	r20, 0x01	; 1
 22e:	59 f4       	brne	.+22     	; 0x246 <DIO_write+0xc8>
		{
			PORTD_DATA|=HIGH<<pin;
 230:	22 b3       	in	r18, 0x12	; 18
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	02 c0       	rjmp	.+4      	; 0x23c <DIO_write+0xbe>
 238:	88 0f       	add	r24, r24
 23a:	99 1f       	adc	r25, r25
 23c:	6a 95       	dec	r22
 23e:	e2 f7       	brpl	.-8      	; 0x238 <DIO_write+0xba>
 240:	82 2b       	or	r24, r18
 242:	82 bb       	out	0x12, r24	; 18
 244:	08 95       	ret
		}
		else
		{
			PORTD_DATA&=~(HIGH<<pin);
 246:	22 b3       	in	r18, 0x12	; 18
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	02 c0       	rjmp	.+4      	; 0x252 <DIO_write+0xd4>
 24e:	88 0f       	add	r24, r24
 250:	99 1f       	adc	r25, r25
 252:	6a 95       	dec	r22
 254:	e2 f7       	brpl	.-8      	; 0x24e <DIO_write+0xd0>
 256:	80 95       	com	r24
 258:	82 23       	and	r24, r18
 25a:	82 bb       	out	0x12, r24	; 18
 25c:	08 95       	ret

0000025e <DIO_port>:
			break; //invalid config
	}
	
}
void DIO_port(uint8_t port, uint8_t data)
{
 25e:	1f 93       	push	r17
 260:	cf 93       	push	r28
 262:	df 93       	push	r29
 264:	18 2f       	mov	r17, r24
 266:	d6 2f       	mov	r29, r22
	EN_pins EN_counter;
	uint8_t u8_pinData;
	for(EN_counter=P0;EN_counter<=P7;EN_counter++)
 268:	c0 e0       	ldi	r28, 0x00	; 0
 26a:	17 c0       	rjmp	.+46     	; 0x29a <DIO_port+0x3c>
	{
		u8_pinData=((data&(HIGH<<EN_counter))>>EN_counter);
 26c:	41 e0       	ldi	r20, 0x01	; 1
 26e:	50 e0       	ldi	r21, 0x00	; 0
 270:	0c 2e       	mov	r0, r28
 272:	02 c0       	rjmp	.+4      	; 0x278 <DIO_port+0x1a>
 274:	44 0f       	add	r20, r20
 276:	55 1f       	adc	r21, r21
 278:	0a 94       	dec	r0
 27a:	e2 f7       	brpl	.-8      	; 0x274 <DIO_port+0x16>
 27c:	8d 2f       	mov	r24, r29
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	48 23       	and	r20, r24
 282:	59 23       	and	r21, r25
 284:	0c 2e       	mov	r0, r28
 286:	02 c0       	rjmp	.+4      	; 0x28c <DIO_port+0x2e>
 288:	55 95       	asr	r21
 28a:	47 95       	ror	r20
 28c:	0a 94       	dec	r0
 28e:	e2 f7       	brpl	.-8      	; 0x288 <DIO_port+0x2a>
		DIO_write(port,EN_counter,u8_pinData);
 290:	6c 2f       	mov	r22, r28
 292:	81 2f       	mov	r24, r17
 294:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_write>
}
void DIO_port(uint8_t port, uint8_t data)
{
	EN_pins EN_counter;
	uint8_t u8_pinData;
	for(EN_counter=P0;EN_counter<=P7;EN_counter++)
 298:	cf 5f       	subi	r28, 0xFF	; 255
 29a:	c8 30       	cpi	r28, 0x08	; 8
 29c:	38 f3       	brcs	.-50     	; 0x26c <DIO_port+0xe>
	{
		u8_pinData=((data&(HIGH<<EN_counter))>>EN_counter);
		DIO_write(port,EN_counter,u8_pinData);
	}
}
 29e:	df 91       	pop	r29
 2a0:	cf 91       	pop	r28
 2a2:	1f 91       	pop	r17
 2a4:	08 95       	ret

000002a6 <DIO_read>:
		break; //invalid config
	}
}
void DIO_read(uint8_t port, EN_pins pin, uint8_t *data)
{
	switch(port)
 2a6:	82 34       	cpi	r24, 0x42	; 66
 2a8:	01 f1       	breq	.+64     	; 0x2ea <DIO_read+0x44>
 2aa:	18 f4       	brcc	.+6      	; 0x2b2 <DIO_read+0xc>
 2ac:	81 34       	cpi	r24, 0x41	; 65
 2ae:	39 f0       	breq	.+14     	; 0x2be <DIO_read+0x18>
 2b0:	08 95       	ret
 2b2:	83 34       	cpi	r24, 0x43	; 67
 2b4:	81 f1       	breq	.+96     	; 0x316 <DIO_read+0x70>
 2b6:	84 34       	cpi	r24, 0x44	; 68
 2b8:	09 f4       	brne	.+2      	; 0x2bc <DIO_read+0x16>
 2ba:	43 c0       	rjmp	.+134    	; 0x342 <DIO_read+0x9c>
 2bc:	08 95       	ret
	{
		case 'A':
		*data=(PORTA_STATUS&(HIGH<<pin))>>pin;	//place bit in data
 2be:	79 b3       	in	r23, 0x19	; 25
 2c0:	81 e0       	ldi	r24, 0x01	; 1
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	9c 01       	movw	r18, r24
 2c6:	06 2e       	mov	r0, r22
 2c8:	02 c0       	rjmp	.+4      	; 0x2ce <DIO_read+0x28>
 2ca:	22 0f       	add	r18, r18
 2cc:	33 1f       	adc	r19, r19
 2ce:	0a 94       	dec	r0
 2d0:	e2 f7       	brpl	.-8      	; 0x2ca <DIO_read+0x24>
 2d2:	87 2f       	mov	r24, r23
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	82 23       	and	r24, r18
 2d8:	93 23       	and	r25, r19
 2da:	02 c0       	rjmp	.+4      	; 0x2e0 <DIO_read+0x3a>
 2dc:	95 95       	asr	r25
 2de:	87 95       	ror	r24
 2e0:	6a 95       	dec	r22
 2e2:	e2 f7       	brpl	.-8      	; 0x2dc <DIO_read+0x36>
 2e4:	fa 01       	movw	r30, r20
 2e6:	80 83       	st	Z, r24
		break;
 2e8:	08 95       	ret
		case 'B':
		*data=((PORTB_STATUS&(HIGH<<pin))>>pin);
 2ea:	76 b3       	in	r23, 0x16	; 22
 2ec:	81 e0       	ldi	r24, 0x01	; 1
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	9c 01       	movw	r18, r24
 2f2:	06 2e       	mov	r0, r22
 2f4:	02 c0       	rjmp	.+4      	; 0x2fa <DIO_read+0x54>
 2f6:	22 0f       	add	r18, r18
 2f8:	33 1f       	adc	r19, r19
 2fa:	0a 94       	dec	r0
 2fc:	e2 f7       	brpl	.-8      	; 0x2f6 <DIO_read+0x50>
 2fe:	87 2f       	mov	r24, r23
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	82 23       	and	r24, r18
 304:	93 23       	and	r25, r19
 306:	02 c0       	rjmp	.+4      	; 0x30c <DIO_read+0x66>
 308:	95 95       	asr	r25
 30a:	87 95       	ror	r24
 30c:	6a 95       	dec	r22
 30e:	e2 f7       	brpl	.-8      	; 0x308 <DIO_read+0x62>
 310:	fa 01       	movw	r30, r20
 312:	80 83       	st	Z, r24
		break;
 314:	08 95       	ret
		case 'C':
		*data=(PORTC_STATUS&(HIGH<<pin))>>pin;
 316:	73 b3       	in	r23, 0x13	; 19
 318:	81 e0       	ldi	r24, 0x01	; 1
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	9c 01       	movw	r18, r24
 31e:	06 2e       	mov	r0, r22
 320:	02 c0       	rjmp	.+4      	; 0x326 <DIO_read+0x80>
 322:	22 0f       	add	r18, r18
 324:	33 1f       	adc	r19, r19
 326:	0a 94       	dec	r0
 328:	e2 f7       	brpl	.-8      	; 0x322 <DIO_read+0x7c>
 32a:	87 2f       	mov	r24, r23
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	82 23       	and	r24, r18
 330:	93 23       	and	r25, r19
 332:	02 c0       	rjmp	.+4      	; 0x338 <DIO_read+0x92>
 334:	95 95       	asr	r25
 336:	87 95       	ror	r24
 338:	6a 95       	dec	r22
 33a:	e2 f7       	brpl	.-8      	; 0x334 <DIO_read+0x8e>
 33c:	fa 01       	movw	r30, r20
 33e:	80 83       	st	Z, r24
		break;
 340:	08 95       	ret
		case 'D':
		*data=(PORTD_STATUS&(HIGH<<pin))>>pin;
 342:	70 b3       	in	r23, 0x10	; 16
 344:	81 e0       	ldi	r24, 0x01	; 1
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	9c 01       	movw	r18, r24
 34a:	06 2e       	mov	r0, r22
 34c:	02 c0       	rjmp	.+4      	; 0x352 <DIO_read+0xac>
 34e:	22 0f       	add	r18, r18
 350:	33 1f       	adc	r19, r19
 352:	0a 94       	dec	r0
 354:	e2 f7       	brpl	.-8      	; 0x34e <DIO_read+0xa8>
 356:	87 2f       	mov	r24, r23
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	82 23       	and	r24, r18
 35c:	93 23       	and	r25, r19
 35e:	02 c0       	rjmp	.+4      	; 0x364 <DIO_read+0xbe>
 360:	95 95       	asr	r25
 362:	87 95       	ror	r24
 364:	6a 95       	dec	r22
 366:	e2 f7       	brpl	.-8      	; 0x360 <DIO_read+0xba>
 368:	fa 01       	movw	r30, r20
 36a:	80 83       	st	Z, r24
 36c:	08 95       	ret

0000036e <KPD_msdelay>:
uint8_t gau8_KPD_keys[3][3]={{'1','2','3'},
{'4','5','6'},
{'7','8','9'}};

void KPD_msdelay(uint8_t time) //rough delay function using for loops
{
 36e:	cf 93       	push	r28
 370:	df 93       	push	r29
 372:	00 d0       	rcall	.+0      	; 0x374 <KPD_msdelay+0x6>
 374:	1f 92       	push	r1
 376:	cd b7       	in	r28, 0x3d	; 61
 378:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t u8_index;
	volatile uint16_t u16_index;
	for(u8_index=0;u8_index<time;u8_index++)
 37a:	19 82       	std	Y+1, r1	; 0x01
 37c:	11 c0       	rjmp	.+34     	; 0x3a0 <KPD_msdelay+0x32>
	{
		for(u16_index=0; u16_index<450; u16_index++)
 37e:	1b 82       	std	Y+3, r1	; 0x03
 380:	1a 82       	std	Y+2, r1	; 0x02
 382:	06 c0       	rjmp	.+12     	; 0x390 <KPD_msdelay+0x22>
 384:	2a 81       	ldd	r18, Y+2	; 0x02
 386:	3b 81       	ldd	r19, Y+3	; 0x03
 388:	2f 5f       	subi	r18, 0xFF	; 255
 38a:	3f 4f       	sbci	r19, 0xFF	; 255
 38c:	3b 83       	std	Y+3, r19	; 0x03
 38e:	2a 83       	std	Y+2, r18	; 0x02
 390:	2a 81       	ldd	r18, Y+2	; 0x02
 392:	3b 81       	ldd	r19, Y+3	; 0x03
 394:	22 3c       	cpi	r18, 0xC2	; 194
 396:	31 40       	sbci	r19, 0x01	; 1
 398:	a8 f3       	brcs	.-22     	; 0x384 <KPD_msdelay+0x16>

void KPD_msdelay(uint8_t time) //rough delay function using for loops
{
	volatile uint8_t u8_index;
	volatile uint16_t u16_index;
	for(u8_index=0;u8_index<time;u8_index++)
 39a:	99 81       	ldd	r25, Y+1	; 0x01
 39c:	9f 5f       	subi	r25, 0xFF	; 255
 39e:	99 83       	std	Y+1, r25	; 0x01
 3a0:	99 81       	ldd	r25, Y+1	; 0x01
 3a2:	98 17       	cp	r25, r24
 3a4:	60 f3       	brcs	.-40     	; 0x37e <KPD_msdelay+0x10>
		for(u16_index=0; u16_index<450; u16_index++)
		{
			
		}
	}
}
 3a6:	0f 90       	pop	r0
 3a8:	0f 90       	pop	r0
 3aa:	0f 90       	pop	r0
 3ac:	df 91       	pop	r29
 3ae:	cf 91       	pop	r28
 3b0:	08 95       	ret

000003b2 <KPD_init>:
void KPD_init(void)
{
 3b2:	ff 92       	push	r15
 3b4:	0f 93       	push	r16
 3b6:	1f 93       	push	r17
 3b8:	cf 93       	push	r28
 3ba:	df 93       	push	r29
 3bc:	cd b7       	in	r28, 0x3d	; 61
 3be:	de b7       	in	r29, 0x3e	; 62
 3c0:	62 97       	sbiw	r28, 0x12	; 18
 3c2:	0f b6       	in	r0, 0x3f	; 63
 3c4:	f8 94       	cli
 3c6:	de bf       	out	0x3e, r29	; 62
 3c8:	0f be       	out	0x3f, r0	; 63
 3ca:	cd bf       	out	0x3d, r28	; 61
	uint8_t u8_index;	
	//Keypad config struct
	//define the rows as OUTPUT and the columns as INPUT
	ST_DIO_config_t ast_KPD_config[KPD_size]={{KPD_PORT,ROW1,OUTPUT},
 3cc:	82 e1       	ldi	r24, 0x12	; 18
 3ce:	ee e7       	ldi	r30, 0x7E	; 126
 3d0:	f0 e0       	ldi	r31, 0x00	; 0
 3d2:	de 01       	movw	r26, r28
 3d4:	11 96       	adiw	r26, 0x01	; 1
 3d6:	01 90       	ld	r0, Z+
 3d8:	0d 92       	st	X+, r0
 3da:	8a 95       	dec	r24
 3dc:	e1 f7       	brne	.-8      	; 0x3d6 <KPD_init+0x24>
	{KPD_PORT,ROW3,OUTPUT},
	{KPD_PORT,COL1,INPUT},
	{KPD_PORT,COL2,INPUT},
	{KPD_PORT,COL3,INPUT}};
	//Loop to configure the struct
	for(u8_index=0;u8_index<KPD_size;u8_index++)
 3de:	f1 2c       	mov	r15, r1
 3e0:	17 c0       	rjmp	.+46     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
	{
		DIO_init(ast_KPD_config+u8_index);
 3e2:	0f 2d       	mov	r16, r15
 3e4:	10 e0       	ldi	r17, 0x00	; 0
 3e6:	c8 01       	movw	r24, r16
 3e8:	88 0f       	add	r24, r24
 3ea:	99 1f       	adc	r25, r25
 3ec:	08 0f       	add	r16, r24
 3ee:	19 1f       	adc	r17, r25
 3f0:	81 e0       	ldi	r24, 0x01	; 1
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	8c 0f       	add	r24, r28
 3f6:	9d 1f       	adc	r25, r29
 3f8:	08 0f       	add	r16, r24
 3fa:	19 1f       	adc	r17, r25
 3fc:	c8 01       	movw	r24, r16
 3fe:	0e 94 41 00 	call	0x82	; 0x82 <DIO_init>
		DIO_write(ast_KPD_config[u8_index].PORT,ast_KPD_config[u8_index].Px,HIGH); //write high on all pins
 402:	41 e0       	ldi	r20, 0x01	; 1
 404:	f8 01       	movw	r30, r16
 406:	61 81       	ldd	r22, Z+1	; 0x01
 408:	80 81       	ld	r24, Z
 40a:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_write>
	{KPD_PORT,ROW3,OUTPUT},
	{KPD_PORT,COL1,INPUT},
	{KPD_PORT,COL2,INPUT},
	{KPD_PORT,COL3,INPUT}};
	//Loop to configure the struct
	for(u8_index=0;u8_index<KPD_size;u8_index++)
 40e:	f3 94       	inc	r15
 410:	f5 e0       	ldi	r31, 0x05	; 5
 412:	ff 15       	cp	r31, r15
 414:	30 f7       	brcc	.-52     	; 0x3e2 <KPD_init+0x30>
	{
		DIO_init(ast_KPD_config+u8_index);
		DIO_write(ast_KPD_config[u8_index].PORT,ast_KPD_config[u8_index].Px,HIGH); //write high on all pins
	}
}
 416:	62 96       	adiw	r28, 0x12	; 18
 418:	0f b6       	in	r0, 0x3f	; 63
 41a:	f8 94       	cli
 41c:	de bf       	out	0x3e, r29	; 62
 41e:	0f be       	out	0x3f, r0	; 63
 420:	cd bf       	out	0x3d, r28	; 61
 422:	df 91       	pop	r29
 424:	cf 91       	pop	r28
 426:	1f 91       	pop	r17
 428:	0f 91       	pop	r16
 42a:	ff 90       	pop	r15
 42c:	08 95       	ret

0000042e <KPD_getVal>:
//get value from keypad
void KPD_getVal(uint8_t *val)
{
 42e:	ef 92       	push	r14
 430:	ff 92       	push	r15
 432:	0f 93       	push	r16
 434:	1f 93       	push	r17
 436:	cf 93       	push	r28
 438:	df 93       	push	r29
 43a:	1f 92       	push	r1
 43c:	cd b7       	in	r28, 0x3d	; 61
 43e:	de b7       	in	r29, 0x3e	; 62
 440:	7c 01       	movw	r14, r24
	EN_pins u8_colIndex=0, u8_rowIndex=0;	//Enum for pins of keypad
	uint8_t u8_retVal=0;	//variable to store the pin value either high or low
 442:	19 82       	std	Y+1, r1	; 0x01
	for(u8_rowIndex=ROW1;u8_rowIndex<=ROW3;u8_rowIndex++)
 444:	02 e0       	ldi	r16, 0x02	; 2
 446:	46 c0       	rjmp	.+140    	; 0x4d4 <KPD_getVal+0xa6>
	{
		DIO_write(KPD_PORT,ROW1,HIGH); //write high on all rows
 448:	41 e0       	ldi	r20, 0x01	; 1
 44a:	62 e0       	ldi	r22, 0x02	; 2
 44c:	83 e4       	ldi	r24, 0x43	; 67
 44e:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_write>
		DIO_write(KPD_PORT,ROW2,HIGH);
 452:	41 e0       	ldi	r20, 0x01	; 1
 454:	63 e0       	ldi	r22, 0x03	; 3
 456:	83 e4       	ldi	r24, 0x43	; 67
 458:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_write>
		DIO_write(KPD_PORT,ROW3,HIGH);
 45c:	41 e0       	ldi	r20, 0x01	; 1
 45e:	64 e0       	ldi	r22, 0x04	; 4
 460:	83 e4       	ldi	r24, 0x43	; 67
 462:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_write>
		DIO_write(KPD_PORT,u8_rowIndex,LOW);	//write low on current row
 466:	40 e0       	ldi	r20, 0x00	; 0
 468:	60 2f       	mov	r22, r16
 46a:	83 e4       	ldi	r24, 0x43	; 67
 46c:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_write>
		for(u8_colIndex=COL1;u8_colIndex<=COL3;u8_colIndex++)
 470:	15 e0       	ldi	r17, 0x05	; 5
 472:	2d c0       	rjmp	.+90     	; 0x4ce <KPD_getVal+0xa0>
		{
			//check on columns
			//read the column value
			DIO_read(KPD_PORT,u8_colIndex,&u8_retVal);
 474:	ae 01       	movw	r20, r28
 476:	4f 5f       	subi	r20, 0xFF	; 255
 478:	5f 4f       	sbci	r21, 0xFF	; 255
 47a:	61 2f       	mov	r22, r17
 47c:	83 e4       	ldi	r24, 0x43	; 67
 47e:	0e 94 53 01 	call	0x2a6	; 0x2a6 <DIO_read>
			//if it is low then the corresponding key is pressed
			if(LOW==u8_retVal)
 482:	89 81       	ldd	r24, Y+1	; 0x01
 484:	81 11       	cpse	r24, r1
 486:	22 c0       	rjmp	.+68     	; 0x4cc <KPD_getVal+0x9e>
			{
				//delay to reduce bouncing
				KPD_msdelay(20);
 488:	84 e1       	ldi	r24, 0x14	; 20
 48a:	0e 94 b7 01 	call	0x36e	; 0x36e <KPD_msdelay>
				while(!u8_retVal)
 48e:	07 c0       	rjmp	.+14     	; 0x49e <KPD_getVal+0x70>
				{
					DIO_read(KPD_PORT,u8_colIndex,&u8_retVal);
 490:	ae 01       	movw	r20, r28
 492:	4f 5f       	subi	r20, 0xFF	; 255
 494:	5f 4f       	sbci	r21, 0xFF	; 255
 496:	61 2f       	mov	r22, r17
 498:	83 e4       	ldi	r24, 0x43	; 67
 49a:	0e 94 53 01 	call	0x2a6	; 0x2a6 <DIO_read>
			//if it is low then the corresponding key is pressed
			if(LOW==u8_retVal)
			{
				//delay to reduce bouncing
				KPD_msdelay(20);
				while(!u8_retVal)
 49e:	89 81       	ldd	r24, Y+1	; 0x01
 4a0:	88 23       	and	r24, r24
 4a2:	b1 f3       	breq	.-20     	; 0x490 <KPD_getVal+0x62>
				{
					DIO_read(KPD_PORT,u8_colIndex,&u8_retVal);
				}
				//return corresponding value depending on the row and column that sa LOW value has been found on.
				*val=gau8_KPD_keys[u8_rowIndex-ROW_OFFSET][u8_colIndex-COL_OFFSET];
 4a4:	80 2f       	mov	r24, r16
 4a6:	90 e0       	ldi	r25, 0x00	; 0
 4a8:	02 97       	sbiw	r24, 0x02	; 2
 4aa:	21 2f       	mov	r18, r17
 4ac:	30 e0       	ldi	r19, 0x00	; 0
 4ae:	25 50       	subi	r18, 0x05	; 5
 4b0:	31 09       	sbc	r19, r1
 4b2:	ac 01       	movw	r20, r24
 4b4:	44 0f       	add	r20, r20
 4b6:	55 1f       	adc	r21, r21
 4b8:	84 0f       	add	r24, r20
 4ba:	95 1f       	adc	r25, r21
 4bc:	80 5a       	subi	r24, 0xA0	; 160
 4be:	9f 4f       	sbci	r25, 0xFF	; 255
 4c0:	fc 01       	movw	r30, r24
 4c2:	e2 0f       	add	r30, r18
 4c4:	f3 1f       	adc	r31, r19
 4c6:	80 81       	ld	r24, Z
 4c8:	f7 01       	movw	r30, r14
 4ca:	80 83       	st	Z, r24
	{
		DIO_write(KPD_PORT,ROW1,HIGH); //write high on all rows
		DIO_write(KPD_PORT,ROW2,HIGH);
		DIO_write(KPD_PORT,ROW3,HIGH);
		DIO_write(KPD_PORT,u8_rowIndex,LOW);	//write low on current row
		for(u8_colIndex=COL1;u8_colIndex<=COL3;u8_colIndex++)
 4cc:	1f 5f       	subi	r17, 0xFF	; 255
 4ce:	18 30       	cpi	r17, 0x08	; 8
 4d0:	88 f2       	brcs	.-94     	; 0x474 <KPD_getVal+0x46>
//get value from keypad
void KPD_getVal(uint8_t *val)
{
	EN_pins u8_colIndex=0, u8_rowIndex=0;	//Enum for pins of keypad
	uint8_t u8_retVal=0;	//variable to store the pin value either high or low
	for(u8_rowIndex=ROW1;u8_rowIndex<=ROW3;u8_rowIndex++)
 4d2:	0f 5f       	subi	r16, 0xFF	; 255
 4d4:	05 30       	cpi	r16, 0x05	; 5
 4d6:	08 f4       	brcc	.+2      	; 0x4da <KPD_getVal+0xac>
 4d8:	b7 cf       	rjmp	.-146    	; 0x448 <KPD_getVal+0x1a>
				*val=gau8_KPD_keys[u8_rowIndex-ROW_OFFSET][u8_colIndex-COL_OFFSET];
			}
			
		}
	}
}
 4da:	0f 90       	pop	r0
 4dc:	df 91       	pop	r29
 4de:	cf 91       	pop	r28
 4e0:	1f 91       	pop	r17
 4e2:	0f 91       	pop	r16
 4e4:	ff 90       	pop	r15
 4e6:	ef 90       	pop	r14
 4e8:	08 95       	ret

000004ea <msdelay>:
ST_DIO_config_t ST_LCD_D6_config = {LCD_PORT,LCD_D6_PIN,OUTPUT};
ST_DIO_config_t ST_LCD_D7_config = {LCD_PORT,LCD_D7_PIN,OUTPUT};

//rough delay in milliseconds (validated by LEDs) 
void msdelay(uint8_t time)
{
 4ea:	cf 93       	push	r28
 4ec:	df 93       	push	r29
 4ee:	00 d0       	rcall	.+0      	; 0x4f0 <msdelay+0x6>
 4f0:	1f 92       	push	r1
 4f2:	cd b7       	in	r28, 0x3d	; 61
 4f4:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t u8_index;
	volatile uint16_t u16_index;
	for(u8_index=0;u8_index<time;u8_index++)
 4f6:	19 82       	std	Y+1, r1	; 0x01
 4f8:	11 c0       	rjmp	.+34     	; 0x51c <msdelay+0x32>
	{
		for(u16_index=0; u16_index<450; u16_index++)
 4fa:	1b 82       	std	Y+3, r1	; 0x03
 4fc:	1a 82       	std	Y+2, r1	; 0x02
 4fe:	06 c0       	rjmp	.+12     	; 0x50c <msdelay+0x22>
 500:	2a 81       	ldd	r18, Y+2	; 0x02
 502:	3b 81       	ldd	r19, Y+3	; 0x03
 504:	2f 5f       	subi	r18, 0xFF	; 255
 506:	3f 4f       	sbci	r19, 0xFF	; 255
 508:	3b 83       	std	Y+3, r19	; 0x03
 50a:	2a 83       	std	Y+2, r18	; 0x02
 50c:	2a 81       	ldd	r18, Y+2	; 0x02
 50e:	3b 81       	ldd	r19, Y+3	; 0x03
 510:	22 3c       	cpi	r18, 0xC2	; 194
 512:	31 40       	sbci	r19, 0x01	; 1
 514:	a8 f3       	brcs	.-22     	; 0x500 <msdelay+0x16>
//rough delay in milliseconds (validated by LEDs) 
void msdelay(uint8_t time)
{
	volatile uint8_t u8_index;
	volatile uint16_t u16_index;
	for(u8_index=0;u8_index<time;u8_index++)
 516:	99 81       	ldd	r25, Y+1	; 0x01
 518:	9f 5f       	subi	r25, 0xFF	; 255
 51a:	99 83       	std	Y+1, r25	; 0x01
 51c:	99 81       	ldd	r25, Y+1	; 0x01
 51e:	98 17       	cp	r25, r24
 520:	60 f3       	brcs	.-40     	; 0x4fa <msdelay+0x10>
		for(u16_index=0; u16_index<450; u16_index++)
		{
			
		}
	}
}
 522:	0f 90       	pop	r0
 524:	0f 90       	pop	r0
 526:	0f 90       	pop	r0
 528:	df 91       	pop	r29
 52a:	cf 91       	pop	r28
 52c:	08 95       	ret

0000052e <LCD_sendStartCmd>:
	
}
void LCD_sendStartCmd(uint8_t u8_cmd)
{
	//send only the high 4 bits and stop so as to tell the LCD we will be working in 4 bit mode
	DIO_port(LCD_PORT,(u8_cmd & 0xF0));
 52e:	68 2f       	mov	r22, r24
 530:	60 7f       	andi	r22, 0xF0	; 240
 532:	81 e4       	ldi	r24, 0x41	; 65
 534:	0e 94 2f 01 	call	0x25e	; 0x25e <DIO_port>
	DIO_write(LCD_PORT,LCD_ENABLE_PIN,HIGH);
 538:	41 e0       	ldi	r20, 0x01	; 1
 53a:	63 e0       	ldi	r22, 0x03	; 3
 53c:	81 e4       	ldi	r24, 0x41	; 65
 53e:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_write>
	DIO_write(LCD_PORT,LCD_RW_PIN,LOW);
 542:	40 e0       	ldi	r20, 0x00	; 0
 544:	62 e0       	ldi	r22, 0x02	; 2
 546:	81 e4       	ldi	r24, 0x41	; 65
 548:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_write>
	DIO_write(LCD_PORT,LCD_RS_PIN,LOW);
 54c:	40 e0       	ldi	r20, 0x00	; 0
 54e:	61 e0       	ldi	r22, 0x01	; 1
 550:	81 e4       	ldi	r24, 0x41	; 65
 552:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_write>
	msdelay(1);
 556:	81 e0       	ldi	r24, 0x01	; 1
 558:	0e 94 75 02 	call	0x4ea	; 0x4ea <msdelay>
	DIO_write(LCD_PORT,LCD_ENABLE_PIN,LOW);
 55c:	40 e0       	ldi	r20, 0x00	; 0
 55e:	63 e0       	ldi	r22, 0x03	; 3
 560:	81 e4       	ldi	r24, 0x41	; 65
 562:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_write>
	msdelay(1);
 566:	81 e0       	ldi	r24, 0x01	; 1
 568:	0e 94 75 02 	call	0x4ea	; 0x4ea <msdelay>
 56c:	08 95       	ret

0000056e <LCD_sendCmd>:
}
void LCD_sendCmd(uint8_t u8_cmd)
{
 56e:	cf 93       	push	r28
 570:	c8 2f       	mov	r28, r24
	//send high nibble
	DIO_port(LCD_PORT,(u8_cmd & 0xF0));
 572:	68 2f       	mov	r22, r24
 574:	60 7f       	andi	r22, 0xF0	; 240
 576:	81 e4       	ldi	r24, 0x41	; 65
 578:	0e 94 2f 01 	call	0x25e	; 0x25e <DIO_port>
	DIO_write(LCD_PORT,LCD_ENABLE_PIN,HIGH);
 57c:	41 e0       	ldi	r20, 0x01	; 1
 57e:	63 e0       	ldi	r22, 0x03	; 3
 580:	81 e4       	ldi	r24, 0x41	; 65
 582:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_write>
	DIO_write(LCD_PORT,LCD_RW_PIN,LOW);
 586:	40 e0       	ldi	r20, 0x00	; 0
 588:	62 e0       	ldi	r22, 0x02	; 2
 58a:	81 e4       	ldi	r24, 0x41	; 65
 58c:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_write>
	DIO_write(LCD_PORT,LCD_RS_PIN,LOW);
 590:	40 e0       	ldi	r20, 0x00	; 0
 592:	61 e0       	ldi	r22, 0x01	; 1
 594:	81 e4       	ldi	r24, 0x41	; 65
 596:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_write>
	msdelay(1);
 59a:	81 e0       	ldi	r24, 0x01	; 1
 59c:	0e 94 75 02 	call	0x4ea	; 0x4ea <msdelay>
	DIO_write(LCD_PORT,LCD_ENABLE_PIN,LOW);
 5a0:	40 e0       	ldi	r20, 0x00	; 0
 5a2:	63 e0       	ldi	r22, 0x03	; 3
 5a4:	81 e4       	ldi	r24, 0x41	; 65
 5a6:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_write>
	msdelay(1);
 5aa:	81 e0       	ldi	r24, 0x01	; 1
 5ac:	0e 94 75 02 	call	0x4ea	; 0x4ea <msdelay>
	//send low nibble
	DIO_port(LCD_PORT,(u8_cmd <<4));
 5b0:	6c 2f       	mov	r22, r28
 5b2:	62 95       	swap	r22
 5b4:	60 7f       	andi	r22, 0xF0	; 240
 5b6:	81 e4       	ldi	r24, 0x41	; 65
 5b8:	0e 94 2f 01 	call	0x25e	; 0x25e <DIO_port>
	DIO_write(LCD_PORT,LCD_ENABLE_PIN,HIGH);
 5bc:	41 e0       	ldi	r20, 0x01	; 1
 5be:	63 e0       	ldi	r22, 0x03	; 3
 5c0:	81 e4       	ldi	r24, 0x41	; 65
 5c2:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_write>
	DIO_write(LCD_PORT,LCD_RW_PIN,LOW);
 5c6:	40 e0       	ldi	r20, 0x00	; 0
 5c8:	62 e0       	ldi	r22, 0x02	; 2
 5ca:	81 e4       	ldi	r24, 0x41	; 65
 5cc:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_write>
	DIO_write(LCD_PORT,LCD_RS_PIN,LOW);
 5d0:	40 e0       	ldi	r20, 0x00	; 0
 5d2:	61 e0       	ldi	r22, 0x01	; 1
 5d4:	81 e4       	ldi	r24, 0x41	; 65
 5d6:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_write>
	msdelay(1);
 5da:	81 e0       	ldi	r24, 0x01	; 1
 5dc:	0e 94 75 02 	call	0x4ea	; 0x4ea <msdelay>
	DIO_write(LCD_PORT,LCD_ENABLE_PIN,LOW);
 5e0:	40 e0       	ldi	r20, 0x00	; 0
 5e2:	63 e0       	ldi	r22, 0x03	; 3
 5e4:	81 e4       	ldi	r24, 0x41	; 65
 5e6:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_write>
	msdelay(1);
 5ea:	81 e0       	ldi	r24, 0x01	; 1
 5ec:	0e 94 75 02 	call	0x4ea	; 0x4ea <msdelay>

}
 5f0:	cf 91       	pop	r28
 5f2:	08 95       	ret

000005f4 <LCD_init>:

//LCD initialization
void LCD_init(void)
{
	/*Configuring pins as output*/
	DIO_init(&ST_LCD_RW_config); 
 5f4:	88 e7       	ldi	r24, 0x78	; 120
 5f6:	90 e0       	ldi	r25, 0x00	; 0
 5f8:	0e 94 41 00 	call	0x82	; 0x82 <DIO_init>
	DIO_init(&ST_LCD_RS_config);
 5fc:	8b e7       	ldi	r24, 0x7B	; 123
 5fe:	90 e0       	ldi	r25, 0x00	; 0
 600:	0e 94 41 00 	call	0x82	; 0x82 <DIO_init>
	DIO_init(&ST_LCD_E_config);
 604:	85 e7       	ldi	r24, 0x75	; 117
 606:	90 e0       	ldi	r25, 0x00	; 0
 608:	0e 94 41 00 	call	0x82	; 0x82 <DIO_init>
	DIO_init(&ST_LCD_D4_config);
 60c:	82 e7       	ldi	r24, 0x72	; 114
 60e:	90 e0       	ldi	r25, 0x00	; 0
 610:	0e 94 41 00 	call	0x82	; 0x82 <DIO_init>
	DIO_init(&ST_LCD_D5_config);
 614:	8f e6       	ldi	r24, 0x6F	; 111
 616:	90 e0       	ldi	r25, 0x00	; 0
 618:	0e 94 41 00 	call	0x82	; 0x82 <DIO_init>
	DIO_init(&ST_LCD_D6_config);
 61c:	8c e6       	ldi	r24, 0x6C	; 108
 61e:	90 e0       	ldi	r25, 0x00	; 0
 620:	0e 94 41 00 	call	0x82	; 0x82 <DIO_init>
	DIO_init(&ST_LCD_D7_config);
 624:	89 e6       	ldi	r24, 0x69	; 105
 626:	90 e0       	ldi	r25, 0x00	; 0
 628:	0e 94 41 00 	call	0x82	; 0x82 <DIO_init>
	/*Awaiting LCD to settle*/
	msdelay(50);
 62c:	82 e3       	ldi	r24, 0x32	; 50
 62e:	0e 94 75 02 	call	0x4ea	; 0x4ea <msdelay>
	//LCD initializes and awaits an 8 bit instruction, this is to tell it that it will be operating 4 bits
	LCD_sendStartCmd(BIT_MODE);
 632:	88 e2       	ldi	r24, 0x28	; 40
 634:	0e 94 97 02 	call	0x52e	; 0x52e <LCD_sendStartCmd>
	msdelay(5);
 638:	85 e0       	ldi	r24, 0x05	; 5
 63a:	0e 94 75 02 	call	0x4ea	; 0x4ea <msdelay>
	//Initialize starting modes
	LCD_sendCmd(BIT_MODE);
 63e:	88 e2       	ldi	r24, 0x28	; 40
 640:	0e 94 b7 02 	call	0x56e	; 0x56e <LCD_sendCmd>
	msdelay(5);
 644:	85 e0       	ldi	r24, 0x05	; 5
 646:	0e 94 75 02 	call	0x4ea	; 0x4ea <msdelay>
	LCD_sendCmd(ON_CONTROL);
 64a:	8e e0       	ldi	r24, 0x0E	; 14
 64c:	0e 94 b7 02 	call	0x56e	; 0x56e <LCD_sendCmd>
	msdelay(1);
 650:	81 e0       	ldi	r24, 0x01	; 1
 652:	0e 94 75 02 	call	0x4ea	; 0x4ea <msdelay>
	LCD_sendCmd(DISPLAY_CLEAR);
 656:	81 e0       	ldi	r24, 0x01	; 1
 658:	0e 94 b7 02 	call	0x56e	; 0x56e <LCD_sendCmd>
	msdelay(1);
 65c:	81 e0       	ldi	r24, 0x01	; 1
 65e:	0e 94 75 02 	call	0x4ea	; 0x4ea <msdelay>
	LCD_sendCmd(ENTRY_MODE);
 662:	86 e0       	ldi	r24, 0x06	; 6
 664:	0e 94 b7 02 	call	0x56e	; 0x56e <LCD_sendCmd>
	msdelay(3);
 668:	83 e0       	ldi	r24, 0x03	; 3
 66a:	0e 94 75 02 	call	0x4ea	; 0x4ea <msdelay>
 66e:	08 95       	ret

00000670 <LCD_goToXY>:
	msdelay(1);

}
void LCD_goToXY(uint8_t line, uint8_t pos)
{
	if(LINE_1==line)
 670:	81 11       	cpse	r24, r1
 672:	05 c0       	rjmp	.+10     	; 0x67e <LCD_goToXY+0xe>
	{
		LCD_sendCmd(HOME_POSITION_LINE_1+pos);
 674:	80 e8       	ldi	r24, 0x80	; 128
 676:	86 0f       	add	r24, r22
 678:	0e 94 b7 02 	call	0x56e	; 0x56e <LCD_sendCmd>
 67c:	08 95       	ret
	}
	else if(LINE_2==line)
 67e:	81 30       	cpi	r24, 0x01	; 1
 680:	21 f4       	brne	.+8      	; 0x68a <LCD_goToXY+0x1a>
	{
		LCD_sendCmd(HOME_POSITION_LINE_2+pos);
 682:	80 ec       	ldi	r24, 0xC0	; 192
 684:	86 0f       	add	r24, r22
 686:	0e 94 b7 02 	call	0x56e	; 0x56e <LCD_sendCmd>
 68a:	08 95       	ret

0000068c <LCD_sendChar>:
	}
	
}
void LCD_sendChar(uint8_t u8_char)
{
 68c:	cf 93       	push	r28
 68e:	c8 2f       	mov	r28, r24
	DIO_port(LCD_PORT,(u8_char & 0xF0));
 690:	68 2f       	mov	r22, r24
 692:	60 7f       	andi	r22, 0xF0	; 240
 694:	81 e4       	ldi	r24, 0x41	; 65
 696:	0e 94 2f 01 	call	0x25e	; 0x25e <DIO_port>
	DIO_write(LCD_PORT,LCD_ENABLE_PIN,HIGH);
 69a:	41 e0       	ldi	r20, 0x01	; 1
 69c:	63 e0       	ldi	r22, 0x03	; 3
 69e:	81 e4       	ldi	r24, 0x41	; 65
 6a0:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_write>
	DIO_write(LCD_PORT,LCD_RW_PIN,LOW);
 6a4:	40 e0       	ldi	r20, 0x00	; 0
 6a6:	62 e0       	ldi	r22, 0x02	; 2
 6a8:	81 e4       	ldi	r24, 0x41	; 65
 6aa:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_write>
	DIO_write(LCD_PORT,LCD_RS_PIN,HIGH);
 6ae:	41 e0       	ldi	r20, 0x01	; 1
 6b0:	61 e0       	ldi	r22, 0x01	; 1
 6b2:	81 e4       	ldi	r24, 0x41	; 65
 6b4:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_write>
	msdelay(1);
 6b8:	81 e0       	ldi	r24, 0x01	; 1
 6ba:	0e 94 75 02 	call	0x4ea	; 0x4ea <msdelay>
	DIO_write(LCD_PORT,LCD_ENABLE_PIN,LOW);
 6be:	40 e0       	ldi	r20, 0x00	; 0
 6c0:	63 e0       	ldi	r22, 0x03	; 3
 6c2:	81 e4       	ldi	r24, 0x41	; 65
 6c4:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_write>
	msdelay(1);
 6c8:	81 e0       	ldi	r24, 0x01	; 1
 6ca:	0e 94 75 02 	call	0x4ea	; 0x4ea <msdelay>
	
	DIO_port(LCD_PORT,(u8_char <<4));
 6ce:	6c 2f       	mov	r22, r28
 6d0:	62 95       	swap	r22
 6d2:	60 7f       	andi	r22, 0xF0	; 240
 6d4:	81 e4       	ldi	r24, 0x41	; 65
 6d6:	0e 94 2f 01 	call	0x25e	; 0x25e <DIO_port>
	DIO_write(LCD_PORT,LCD_ENABLE_PIN,HIGH);
 6da:	41 e0       	ldi	r20, 0x01	; 1
 6dc:	63 e0       	ldi	r22, 0x03	; 3
 6de:	81 e4       	ldi	r24, 0x41	; 65
 6e0:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_write>
	DIO_write(LCD_PORT,LCD_RW_PIN,LOW);
 6e4:	40 e0       	ldi	r20, 0x00	; 0
 6e6:	62 e0       	ldi	r22, 0x02	; 2
 6e8:	81 e4       	ldi	r24, 0x41	; 65
 6ea:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_write>
	DIO_write(LCD_PORT,LCD_RS_PIN,HIGH);
 6ee:	41 e0       	ldi	r20, 0x01	; 1
 6f0:	61 e0       	ldi	r22, 0x01	; 1
 6f2:	81 e4       	ldi	r24, 0x41	; 65
 6f4:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_write>
	msdelay(1);
 6f8:	81 e0       	ldi	r24, 0x01	; 1
 6fa:	0e 94 75 02 	call	0x4ea	; 0x4ea <msdelay>
	DIO_write(LCD_PORT,LCD_ENABLE_PIN,LOW);
 6fe:	40 e0       	ldi	r20, 0x00	; 0
 700:	63 e0       	ldi	r22, 0x03	; 3
 702:	81 e4       	ldi	r24, 0x41	; 65
 704:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_write>
	msdelay(1);
 708:	81 e0       	ldi	r24, 0x01	; 1
 70a:	0e 94 75 02 	call	0x4ea	; 0x4ea <msdelay>
}
 70e:	cf 91       	pop	r28
 710:	08 95       	ret

00000712 <LCD_sendStr>:
void LCD_sendStr(sint8_t au8_str[])
{
 712:	0f 93       	push	r16
 714:	1f 93       	push	r17
 716:	cf 93       	push	r28
 718:	8c 01       	movw	r16, r24
	uint8_t u8_index=0;
 71a:	c0 e0       	ldi	r28, 0x00	; 0
	while(au8_str[u8_index]!='\0')
 71c:	03 c0       	rjmp	.+6      	; 0x724 <LCD_sendStr+0x12>
	{
		LCD_sendChar(au8_str[u8_index]);
 71e:	0e 94 46 03 	call	0x68c	; 0x68c <LCD_sendChar>
		u8_index++;
 722:	cf 5f       	subi	r28, 0xFF	; 255
	msdelay(1);
}
void LCD_sendStr(sint8_t au8_str[])
{
	uint8_t u8_index=0;
	while(au8_str[u8_index]!='\0')
 724:	f8 01       	movw	r30, r16
 726:	ec 0f       	add	r30, r28
 728:	f1 1d       	adc	r31, r1
 72a:	80 81       	ld	r24, Z
 72c:	81 11       	cpse	r24, r1
 72e:	f7 cf       	rjmp	.-18     	; 0x71e <LCD_sendStr+0xc>
	{
		LCD_sendChar(au8_str[u8_index]);
		u8_index++;
	}
}
 730:	cf 91       	pop	r28
 732:	1f 91       	pop	r17
 734:	0f 91       	pop	r16
 736:	08 95       	ret

00000738 <main>:
#include "02-MCAL/ADC/ADC_interface.h"
#include "03-HAL/LCD/Interface.h"


int main()
{
 738:	cf 93       	push	r28
 73a:	df 93       	push	r29
 73c:	1f 92       	push	r1
 73e:	cd b7       	in	r28, 0x3d	; 61
 740:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_KPD_val;
	KPD_init();		/*initialization of keypad */
 742:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <KPD_init>
	LCD_init();			/* Initialization of LCD */
 746:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <LCD_init>
	LCD_sendStr("KeyPad button");	/* Write string on 1st line of LCD */
 74a:	80 e9       	ldi	r24, 0x90	; 144
 74c:	90 e0       	ldi	r25, 0x00	; 0
 74e:	0e 94 89 03 	call	0x712	; 0x712 <LCD_sendStr>
	
	while(1)
	{
		
		LCD_goToXY(LINE_2,8);	/* LCD16x2 cursor position */
 752:	68 e0       	ldi	r22, 0x08	; 8
 754:	81 e0       	ldi	r24, 0x01	; 1
 756:	0e 94 38 03 	call	0x670	; 0x670 <LCD_goToXY>
		KPD_getVal(&u8_KPD_val);	/*get Keypad value*/
 75a:	ce 01       	movw	r24, r28
 75c:	01 96       	adiw	r24, 0x01	; 1
 75e:	0e 94 17 02 	call	0x42e	; 0x42e <KPD_getVal>
		LCD_sendChar(u8_KPD_val); /*Send it to LCD*/
 762:	89 81       	ldd	r24, Y+1	; 0x01
 764:	0e 94 46 03 	call	0x68c	; 0x68c <LCD_sendChar>
		LCD_sendStr("  ");
 768:	8e e9       	ldi	r24, 0x9E	; 158
 76a:	90 e0       	ldi	r25, 0x00	; 0
 76c:	0e 94 89 03 	call	0x712	; 0x712 <LCD_sendStr>
		msdelay(200);
 770:	88 ec       	ldi	r24, 0xC8	; 200
 772:	0e 94 75 02 	call	0x4ea	; 0x4ea <msdelay>
 776:	ed cf       	rjmp	.-38     	; 0x752 <main+0x1a>

00000778 <_exit>:
 778:	f8 94       	cli

0000077a <__stop_program>:
 77a:	ff cf       	rjmp	.-2      	; 0x77a <__stop_program>
